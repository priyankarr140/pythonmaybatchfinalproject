{"name": "test_booking", "status": "broken", "statusDetails": {"message": "TypeError: not all arguments converted during string formatting", "trace": "self = <test.testcases.test_e2e.TestBooking object at 0x000001EBC7A3B9A0>\n\n    def test_booking(self):\n        logs = self.get_logger()\n        try:\n            logs.debug('Browser launched')\n            db=DBConnectionFile()\n            data=db.dbconnect()\n            logs.debug('Website Launched')\n            time.sleep(5)\n            self.driver.execute_script(\"document.elementFromPoint(0,0).click()\")\n            #login=LoginPage(self.driver)\n            #logs.debug('Phone Number Entered')\n            #login.usernameInputOption().send_keys(data[2])\n            #login.continueBtnOption().click()\n            #otp = input()\n            #logs.debug('OTP Entered')\n            #login.otpInputOption().send_keys(data[3])\n           # login.loginBtnOption().click()\n            self.driver.execute_script(\"document.elementFromPoint(0,0).click()\")\n            bookObj=BookingPage(self.driver)\n>           bookObj.fromButtonOption().click()\n\ntest_e2e.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"ce43e48007620fa85e91982bb824cd22\", element=\"5210AFD6949776FA1679F855D8974A56_element_56\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"ce43e48007620fa85e91982bb824cd22\", element=\"5210AFD6949776FA1679F855D8974A56_element_56\")>\ncommand = 'clickElement', params = {'id': '5210AFD6949776FA1679F855D8974A56_element_56'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ce43e48007620fa85e91982bb824cd22\")>, driver_command = 'clickElement'\nparams = {'id': '5210AFD6949776FA1679F855D8974A56_element_56'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EBC7A3BBB0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"lbl_input appendBottom10\">...</span> is not clickable at point (330, 243). Other element would receive the click: <iframe title=\"notification-frame-~1971373bc\" name=\"notification-frame-~1971373bc\" id=\"webklipper-publisher-widget-container-notification-frame\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\" style=\"display: block; position: fixed; z-index: 16776272; left: -1000px; top: -1000px; visibility: visible; height: 100%; width: 100%; transform: translate(1000px, 1000px);\" data-notification-layout-id=\"~184fc0b7\" data-notification-layout-name=\"modal\"></iframe>\nE         (Session info: chrome=115.0.5790.110)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x009EA813+48355]\nE       \t(No symbol) [0x0097C4B1]\nE       \t(No symbol) [0x00885358]\nE       \t(No symbol) [0x008B5062]\nE       \t(No symbol) [0x008B3B98]\nE       \t(No symbol) [0x008B239B]\nE       \t(No symbol) [0x008B179E]\nE       \t(No symbol) [0x008A9F5C]\nE       \t(No symbol) [0x008CA73C]\nE       \t(No symbol) [0x008A9A36]\nE       \t(No symbol) [0x008CAA94]\nE       \t(No symbol) [0x008DC922]\nE       \t(No symbol) [0x008CA536]\nE       \t(No symbol) [0x008A82DC]\nE       \t(No symbol) [0x008A93DD]\nE       \tGetHandleVerifier [0x00C4AABD+2539405]\nE       \tGetHandleVerifier [0x00C8A78F+2800735]\nE       \tGetHandleVerifier [0x00C8456C+2775612]\nE       \tGetHandleVerifier [0x00A751E0+616112]\nE       \t(No symbol) [0x00985F8C]\nE       \t(No symbol) [0x00982328]\nE       \t(No symbol) [0x0098240B]\nE       \t(No symbol) [0x00974FF7]\nE       \tBaseThreadInitThunk [0x765C00C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7AEE+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.testcases.test_e2e.TestBooking object at 0x000001EBC7A3B9A0>\n\n    def test_booking(self):\n        logs = self.get_logger()\n        try:\n            logs.debug('Browser launched')\n            db=DBConnectionFile()\n            data=db.dbconnect()\n            logs.debug('Website Launched')\n            time.sleep(5)\n            self.driver.execute_script(\"document.elementFromPoint(0,0).click()\")\n            #login=LoginPage(self.driver)\n            #logs.debug('Phone Number Entered')\n            #login.usernameInputOption().send_keys(data[2])\n            #login.continueBtnOption().click()\n            #otp = input()\n            #logs.debug('OTP Entered')\n            #login.otpInputOption().send_keys(data[3])\n           # login.loginBtnOption().click()\n            self.driver.execute_script(\"document.elementFromPoint(0,0).click()\")\n            bookObj=BookingPage(self.driver)\n            bookObj.fromButtonOption().click()\n            bookObj.fromInputOption().send_keys(data[0])\n            bookObj.fromCityOption().click()\n            logs.debug('From city selected')\n            bookObj.toButtonOption().click()\n            bookObj.toInputOption().send_keys(data[1])\n            bookObj.toCityOption().click()\n            logs.debug('To city selected')\n            bookObj.nextBtnOption().click()\n            time.sleep(3)\n            dates = bookObj.dateChoicesOption()\n            for d in dates:\n                e = d.find_element(By.TAG_NAME, value=\"p\")\n                if e.text == '15':\n                    e.click()\n                    break\n            logs.debug('Date selected')\n            bookObj.classTravelOption().click()\n            bookObj.adultTktsOption().click()\n            bookObj.childTktsOption().click()\n            logs.debug('Passenger selected')\n            bookObj.applyTktsOption().click()\n            bookObj.searchFlightOption().click()\n            bookObj.adPopupOption().click()\n            self.takescreenshot(self.driver)\n            logs.debug('Successful booking')\n        except Exception as ex:\n>           logs.error(\"Exception occurred \",ex)\n\ntest_e2e.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1506: in error\n    self._log(ERROR, msg, args, **kwargs)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1624: in _log\n    self.handle(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1634: in handle\n    self.callHandlers(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1696: in callHandlers\n    hdlr.handle(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:968: in handle\n    self.emit(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\logging.py:331: in emit\n    super().emit(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1108: in emit\n    self.handleError(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:1100: in emit\n    msg = self.format(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:943: in format\n    return fmt.format(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\_pytest\\logging.py:92: in format\n    return super().format(record)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:678: in format\n    record.message = record.getMessage()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <LogRecord: mainfolder.utilities.BaseClass, 40, C:\\Users\\Priyanka Arora\\PycharmProjects\\maybatchproject\\test\\testcases\\test_e2e.py, 62, \"Exception occurred \">\n\n    def getMessage(self):\n        \"\"\"\n        Return the message for this LogRecord.\n    \n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        \"\"\"\n        msg = str(self.msg)\n        if self.args:\n>           msg = msg % self.args\nE           TypeError: not all arguments converted during string formatting\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python310\\lib\\logging\\__init__.py:368: TypeError"}, "attachments": [{"name": "log", "source": "a1b97bda-b96e-4416-9f96-903a1e1d4f9b-attachment.txt", "type": "text/plain"}], "start": 1690383114946, "stop": 1690383122221, "uuid": "9f1bdceb-228a-48a3-84fb-402c71939aac", "historyId": "f3714a59b3d9fc64d69092d0f9ec11ff", "testCaseId": "00729a1455ebf4eaeb2e3b812c926342", "fullName": "test_e2e.TestBooking#test_booking", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "suite", "value": "test_e2e"}, {"name": "subSuite", "value": "TestBooking"}, {"name": "host", "value": "DESKTOP-A54I250"}, {"name": "thread", "value": "10932-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_e2e"}]}